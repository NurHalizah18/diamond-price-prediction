# -*- coding: utf-8 -*-
"""prediksi harga diamons - linear regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IJvckc0j5wiUp_XNrpg9b8maOIIwvywc

#Import Library
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error

"""#Load Dataset"""

df = pd.read_csv('/content/diamonds.csv')
df.head()

"""* Harga dalam dolar Amerika Serikat ($) adalah fitur target.
* carat: merepresentasikan bobot (weight) dari diamonds (0.2-5.01), digunakan sebagai ukuran dari batu permata dan perhiasan.
* cut: merepresentasikan kualitas pemotongan diamonds (Fair, Good, Very Good, Premium, and Ideal).
* color: merepresentasikan warna, dari J (paling buruk) ke D (yang terbaik).
* clarity: merepresentasikan seberapa jernih diamonds (I1 (paling buruk), SI2, SI1, VS2, VS1, VVS2, VVS1, IF (terbaik))
* x: merepresentasikan panjang diamonds dalam mm (0-10.74).
* y: merepresentasikan lebar diamonds dalam mm (0-58.9).
* z: merepresentasikan kedalaman diamonds dalam mm (0-31.8).
* depth: merepresentasikan z/mean(x, y) = 2 * z/(x + y) (43-79).
* table: merepresentasikan lebar bagian atas berlian relatif terhadap titik terlebar 43-95).

#Data Preparation
"""

df.shape

df.info()

df.isnull().sum()

df.describe()

x = (df.x == 0).sum()
y = (df.y == 0).sum()
z = (df.z == 0).sum()

print(f'Nilai 0 di kolom x ada: {x}')
print(f'Nilai 0 di kolom y ada: {y}')
print(f'Nilai 0 di kolom z ada: {z}')

df.loc[(df['z'] == 0)]

"""#Cleaning Data"""

df = df.loc[(df[['x', 'y', 'z']] != 0).all(axis = 1)]

df.shape

df.describe()

df = df.drop(columns = ['Unnamed: 0'])

df.shape

df.head()

df.describe()

"""#Exploratory Data Analysis (EDA)"""

df

df['cut'].value_counts()

sns.barplot(df, x = 'cut', y = 'price')

sns.scatterplot(df, x = 'carat', y = 'price', hue = 'cut')

"""Berdasarkan barchart yang dihasilkan pertama, menunjukkan bahwa premium memiliki harga yang mahal, dan scatter plot menjawabnya. Salah satu penyebabnya karena carat yang dimiliki lebih besar sehingga harganya juga lebih mahal."""

sns.barplot(df, x = 'cut', y = 'carat')

print(f'price paling besar : {max(df['price'])}')
print(f'price paling kecil : {min(df["price"])}')

sns.scatterplot(df, x = 'carat', y = 'price')

"""Berdasarkan scatter plot yang dilahirkan, semakin besarnya caratnya maka semakin mahal juga harganya."""

df['color'].value_counts()

plt.figure(figsize = (8, 6))
sns.scatterplot(df, x = 'carat', y = 'price', hue = 'color')

df['clarity'].value_counts()

sns.barplot(df, x = 'clarity', y = 'price')

sns.boxplot(df, x = 'clarity', y = 'carat')

plt.figure(figsize = (8, 6))
sns.scatterplot(df, x = 'carat', y = 'price', hue = 'clarity')

"""#Encoding Fitur Kategori"""

df

"""Setelah data sudah bersih, selanjutnya menerapkan salah satu teknik adalah teknik one-hot-encoding."""

df = pd.get_dummies(df, columns = ['cut', 'color', 'clarity'], prefix = ['cut', 'color', 'clarity'], drop_first= True)

# data setelah encoding
df.head(10)

"""#Menentukan Target"""

x = df.drop(columns = ['price'], axis = 1) # kolom fitur
y = df['price'] # kolom targetnya

x

y

"""#Splitting Data"""

X_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 42)

print(f'Total data rill : {len(x)}')
print(f'Total data train : {len(X_train)}')
print(f'Total data test : {len(X_test)}')

"""#Training Model"""

#Model di latih menggunakan linear regression
model = LinearRegression()
model.fit(X_train, y_train)

"""#Evaluasi Model"""

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
r2_score = r2_score(y_test, y_pred)

print(f'MSE : {mse}')
print(f'MAE : {mae}')
print(f'R2 Score : {r2_score}')

"""#Visualization"""

plt.figure(figsize = (8, 6))
sns.scatterplot(x = y_test, y = y_pred)
plt.title('Prediksi Harga Diamonds')
plt.xlabel('Harga Asli')
plt.ylabel('Harga Prediksi')
plt.show()

"""Beradasarkan visualisasi yang di hasilkan, menunjukkan bahwa model sudah memprediksi dengan sangat baik. Hal ini terbukti dari R-Score yang dihasilkan sebesar 91%. Scatter plot diatas menunjukkan hubungan yg kuat antara hatga asli dengan harga prediksi, dan menujukkan menyebaran yang konsisten"""

